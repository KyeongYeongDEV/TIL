## **1. 캐시 메모리와 메모리 계층성**

- **메모리 계층성**: CPU ↔ 레지스터 ↔ 캐시(L1, L2, L3) ↔ 메인 메모리(DRAM) ↔ 보조 저장장치(SSD/HDD)
    
    → 위로 갈수록 용량↓, 속도↑, 가격↑.
    
- **캐시 메모리**: CPU와 메인 메모리 사이에서 **속도 차이 극복**을 위해 자주 쓰는 데이터를 보관하는 초고속 메모리.

---

## **2. 캐시 메모리 위치**

- CPU 칩 안에 내장되거나(CPU die), CPU와 메인 메모리 사이에 존재.
- L1·L2는 대부분 CPU 내부, L3는 코어 공유 구조로 CPU 내부 또는 가까운 칩에 위치.

---

## **3. L1, L2 캐시**

- **L1 캐시**:
    - CPU 코어별로 존재, 매우 작음(수십 KB), 속도 가장 빠름.
    - 보통 **명령어 캐시**와 **데이터 캐시**로 분리.
- **L2 캐시**:
    - L1보다 용량 크고(수백 KB~수MB), 속도는 조금 느림.
    - 최근 CPU는 L2도 코어별로 가지는 경우가 많음.

---

## **4. 캐시 데이터 관리 방식**

- CPU가 메모리 접근 시 **캐시 라인(Cache Line)** 단위(보통 64B)로 읽어와 저장.
- 교체 정책: LRU(Least Recently Used), LFU(Least Frequently Used), Random 등 사용.
- 쓰기 정책: Write-through(메모리 동시 갱신), Write-back(캐시에서만 갱신 후 나중에 메모리 반영).

---

## **5. 캐시간 동기화**

- 멀티코어 환경에서 같은 데이터가 여러 캐시에 복사될 수 있음 → **캐시 일관성(Cache Coherence)** 문제 발생.
- 해결: **MESI 프로토콜**(Modified, Exclusive, Shared, Invalid)로 상태 관리 및 동기화.

---

## **6. 캐시 메모리의 매핑 방식**

1. **Direct Mapped**: 메모리 주소가 캐시 한 위치에만 매핑 → 구현 간단, 충돌 많음.
2. **Fully Associative**: 어느 캐시 라인에도 저장 가능 → 유연하지만 탐색 비용 큼.
3. **Set Associative**: Direct + Fully 절충 → 보통 2-way, 4-way 등 사용.

---

## **7. 캐시의 지역성(Locality)**

- **시간 지역성(Temporal)**: 최근에 접근한 데이터는 곧 다시 접근될 가능성↑.
- **공간 지역성(Spatial)**: 인접한 주소의 데이터에 접근 가능성↑.

---

## **8. 2D 배열 가로/세로 탐색 성능 차이**

- 배열은 **행 우선(row-major)** 메모리 배치.
- **가로 탐색**: 인접 메모리 접근 → 공간 지역성↑ → 캐시 적중률↑.
- **세로 탐색**: 멀리 떨어진 주소 접근 → 캐시 적중률↓ → 성능 저하.

---

## **9. 공간 지역성 구현**

- 캐시는 **캐시 라인(Cache Line)** 단위(64B 등)로 저장·관리.
- 한 번 메모리 접근 시 인접 데이터까지 한 라인에 같이 가져와서 공간 지역성을 활용.

---

**정리**

> “캐시는 CPU와 메모리 속도 차를 줄이기 위해 L1~L3 계층으로 구성되고, 캐시 라인 단위로 데이터 관리하며, 지역성을 활용해 성능을 높입니다. L1은 가장 빠르고 작으며, 가로 탐색이 세로보다 빠른 이유는 공간 지역성 때문입니다.”
> 

# 면접 대답

## **1. 캐시 메모리와 메모리 계층성**

> "캐시 메모리는 CPU와 메인 메모리 사이에 있는 초고속 메모리로, 메모리 계층성에서 속도 차를 줄이기 위해 사용됩니다."
> 

---

## **2. 캐시 위치 / L1·L2**

> "L1과 L2는 보통 CPU 내부에 있고, L1은 작지만 가장 빠르며 명령어와 데이터로 분리됩니다.
L2는 더 크지만 조금 느리고, 최근 CPU는 코어별로 L2를 가집니다."
> 

---

## **3. 캐시 데이터 관리**

> "캐시는 캐시 라인 단위로 데이터를 가져오고, LRU 등 교체 정책과 Write-through·Write-back 같은 쓰기 정책으로 관리됩니다."
> 

---

## **4. 캐시 동기화**

> "멀티코어 환경에서는 MESI 같은 캐시 일관성 프로토콜로 각 코어의 캐시 상태를 동기화합니다."
> 

---

## **5. 매핑 방식**

> "Direct Mapped, Fully Associative, Set Associative 방식이 있고, 보통 Set Associative가 사용됩니다."
> 

---

## **6. 지역성과 성능**

> "시간 지역성은 최근 데이터 재사용, 공간 지역성은 인접 데이터 접근 가능성입니다.
이 때문에 2차원 배열은 가로 탐색이 세로 탐색보다 캐시 적중률이 높아 빠릅니다."
> 

---

## **7. 공간 지역성 구현**

> "캐시는 64바이트 정도의 캐시 라인 단위로 데이터를 관리해 한 번에 인접 데이터까지 가져옵니다."
>
